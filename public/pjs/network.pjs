import( '/pjs/Tween.lib' );
import( '/pjs/util.lib' );

color[] colors = new color[12];

colors[0] = #24cfd5; // Category node color
colors[1] = #FF784F;
colors[2] = #ffaa00; // Issue node color
colors[3] = #FF6238; // User node color
colors[4] = #23d3b6;
colors[5] = #3277ff;
colors[6] = #ff431e;
colors[7] = #24cfd5;
colors[8] = #ffaa00;
colors[9] = #FF6238;
colors[10] = #ff0000;
colors[11] = #ff0000;

color LABEL_COLOR = #4c9699;
color HIGHLIGHTED_LABEL_COLOR = #5070a0;
color DONUT_BACKGROUND = #DDEAE9;
color BACKGROUND = #EFEFEF;

// global constants
float STROKE_WEIGHT_COLLAPSED = 50;
float STROKE_WEIGHT_EXPANDED = 60;
float OUTER_BORDER = 5;

float RADIUS_OPENED = 110;
float RADIUS_CLOSED = 50;

PFont defaultFont = loadFont("/fonts/Helvetica.svg");

int fontSize = 11.3;
int fontSizeCaption = 16;

int nodeCount = 0;

Resource fetchResource(String resourceId) {
  // init dummy resource
  Resource resource = new Resource(resourceId, "", "");
  nodeCount++;
  resource.idx = nodeCount;
  resource.fetchData(); // start fetching data from freebase
  return resource;
}

Graph g;
Resource r;

int selectedEdgeIndex = null;

void resize() {
  size(window.innerWidth-10, window.innerHeight-15);
}

void setup() {
  myGraph = g = new Graph();
  // myGraph exposes the graph to the outside world
  textFont(defaultFont, fontSize);
  nodeCount = 0;
  resize();
  fill(0);
  smooth();
  frameRate(30);
  background(BACKGROUND);

  if (resourceId) {
    r = fetchResource(resourceId);
    g.addNode(root = new Node(r));
    g.selectedNode = root;
    $('#details').html(r.html);
  }
}

void draw() {
  if (g.nodes.size()>0) {
    g.tick();
    background(BACKGROUND);
    g.draw();
  }
}

void mouseMoved() {
  if (!resourceId) return;

  if (!g.isDragging()) {
    Resource r = g.selectedNode.subject;
    r.checkSelected();

    g.checkSelected(); // checkDragged

    selectedEdgeIndex = null;
    // Iterate over nodes
    for (int i=0; i< g.edges.size(); i++) {
      if (g.edges[i].mouseOver()) {
        selectedEdgeIndex = i;
      }
    }
  }
}





void addNode(Value val) {
  Resource r = g.selectedNode.subject;
  Node n = g.getNodeById(val.getId());

  // close current resource
  r.setClosed();

  DonutSegment seg = r.donut.selectedSegment;

  if (!n) { // not found
    Resource r2 = fetchResource(val.getId());
    g.addNode(newNode = new Node(r2));
    g.addEdge(new Edge(g.selectedNode, newNode, seg));
    g.setSelectedNode(newNode);
  } else {
    g.addEdge(new Edge(g.selectedNode, n, seg));
    g.setSelectedNode(n);
    g.selectedNode.subject.setOpen();
  }
}





void mousePressed() {

  // ->> g.checkSelected()
  // g.checkSelected(); // updates g.selectedNode if necessary

  if (g.dragNode!==g.selectedNode && g.dragNode!=null) {
    g.selectNode(g.dragNode);

    return; // that's all
  }

  Resource r = g.selectedNode.subject;

  if (!resourceId) return;
  if (mouseButton == LEFT) {
    Resource r = g.selectedNode.subject;
    Value selectedValue = r.getSelectedValue();

    if (selectedValue !== null && selectedValue.hovering) {
      addNode(selectedValue);
    } else if (g.selectedNode != null) {
      g.dragging = true;
    }
  } else { // Right click
    // removes resource from graph
    Resource r = g.selectedNode.subject;
    g.removeNode(g.selectedNode);
    g.selectedNode = g.nodes[0];
  }
}


void mouseReleased() {
  g.dragging = false;
}

void mouseDragged() {
  if (g.getDragNode() != null) {
    g.getDragNode().setPos(mouseX, mouseY, 0);
  }
}
